#!/usr/bin/env node
'use strict'

const updateNotifier = require('update-notifier')
const pkg = require('../package.json')
const chalk = require('chalk')
const spinner = require('ora')()
const execFile = require('execa')
const program = require('commander')
const logUpdate = require('log-update')
const prettyBytes = require('pretty-bytes')
const stringWidth = require('string-width')
const createTable = require('text-table')
const execPath = require.resolve('./exec')

// Check for cli updates.
updateNotifier({pkg: pkg}).notify()

// Parse cli options.
program
  .usage('[options] <name ...>')
  .option('-v, --verbose', 'display initial, minified and gzipped size')
  .parse(process.argv)

const bundles = parse(program.args).map(packages => ({
  packages,
  name: packages.join(chalk.dim(' + ')),
  stats: null,
  error: null
}))

const headings = [
  'Package',
  '',
  'Initial',
  'Minified',
  'Gzipped'
].map(heading => chalk.dim(heading))

if (program.args.length > 0) {
  // Start cli render loop.
  const interval = setInterval(render, 100)

  // Build and analyze packages sequentially.
  Promise.all(bundles.map(bundle => {
    // Runs jsize in a child process to avoid lag in the loading animation.
    return execFile('node', [execPath].concat(bundle.packages))
      .then(result => {
        if (result.stderr) throw new Error(result.stderr)
        bundle.stats = JSON.parse(result.stdout)
      })
      .catch(err => { bundle.error = err.message })
  })).then(() => {
    clearInterval(interval)
    render()

    const err = bundles
      .map(bundle => bundle.error)
      .filter(Boolean)
      .join('\n')

    if (err) {
      console.error(chalk.red(err))
      process.exit(1)
    }
  }).catch(err => {
    console.error(err)
    process.exit(1)
  })
} else {
  program.help()
}

/**
 * Parses program args to list of bundles, each bundle is list of packages.
 * Example: "a + c b" -> [ ['a', 'b'], ['c'] ]
 *
 * @param {array} args
 * @returns {array}
 */
function parse (args) {
  // Tokenize args to standard form: ['a+c', '+', 'b'] -> ['a', '+', 'c', '+', 'b']
  const tokens = args
    .join(' ')
    .replace(/\+/g, ' + ')
    .split(' ')
    .filter(s => s !== '')

  const next = () => tokens.shift()
  const pack = () => {
    lookahead && x[x.length - 1].push(lookahead)
    lookahead = next()
  }

  let x = []
  let lookahead = next()

  do {
    x.push([])
    pack()
    while (lookahead === '+') {
      lookahead = next()
      pack()
    }
  } while (lookahead || tokens.length > 0)

  return x
}

/**
 * Renders a table with the current results to the terminal.
 */
function render () {
  const loading = spinner.frame()
  const table = bundles.map(bundle => {
    const stats = bundle.stats
    const row = [
      bundle.name,
      chalk.dim('=')
    ]

    if (stats) {
      if (program.verbose) {
        row.push(
          prettyBytes(stats.initial),
          prettyBytes(stats.minified),
          colorBytes(stats.gzipped)
        )
      } else {
        row.push(colorBytes(stats.gzipped) + chalk.dim(' (gzipped)'))
      }
    } else {
      const fill = bundle.error ? chalk.red('X') : loading
      row.push(fill)

      if (program.verbose) {
        row.push(fill, fill)
      }
    }

    return row
  })

  if (program.verbose) {
    table.unshift(headings, [''])
  }

  logUpdate(
    '\n' +
    createTable(table, {stringLength: stringWidth})
      .split('\n')
      .map(s => '  ' + s)
      .join('\n') +
    '\n'
  )
}

/**
 * Converts bytes into human readable, color coated format.
 *
 * @param {number} n - the number of bytes.
 * @return {string}
 */
function colorBytes (n) {
  const str = prettyBytes(n)
  if (n < 1000) {
    return chalk.underline.green(str)
  } else if (n < 5000) {
    return chalk.green(str)
  } else if (n < 50000) {
    return chalk.yellow(str)
  } else {
    return chalk.red(str)
  }
}
